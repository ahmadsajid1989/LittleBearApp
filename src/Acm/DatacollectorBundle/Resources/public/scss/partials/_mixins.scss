/*---------------------------------------
                font face
---------------------------------------- */

@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg','grad','turn','rad',unit($value));
  @return $is-keyword or $is-angle;
}

@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
          to top:bottom,
          to top right:bottom left,
          to right top:left bottom,
          to right:left,
          to bottom right:top left,
          to right bottom:left top,
          to bottom:top,
          to bottom left:top right,
          to left bottom:right top,
          to left:right,
          to left top:right bottom,
          to top left:bottom right);
  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }
  @return 90 deg - $value;
}

@mixin linear-gradients($direction, $color-stop...) {
  @if is-direction($direction)== false {
    $color-stop: $direction, $color-stop;
    $direction: 180deg;
  }

  background: nth(nth($color-stop, 1), 1);
  background: -moz-linear-gradient(legacy-direction($direction), $color-stop);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stop);
  background: linear-gradient($direction, $color-stop);
} //TODO: add internet explorer support

@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{'-' + $prefix + '-' + $property}: $value;
  }

  // Output standard non-prefixed declaration
  #{$property}: $value;
}

// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg,$unicode-range...) {
  $src: null;

  $extmods: (
          eot: "?",
          svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
          otf: "opentype",
          ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
    unicode-range: $unicode-range;
  }
}

/*-----------------------------------------
             background image
------------------------------------------*/

@mixin  background ($color, $image, $repeat, $position){
  $image: url($image);
  background: $color $image $repeat $position;
}

/*-------------------------------------------
              border-radius
---------------------------------------------*/
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

// =============================================================================
// media query mixins
// =============================================================================

$xtra-small-width: 480px;
$small-width : 768px;
$medium-width: 992px;
$large-width:1200px;
$xtra-large-width: 1600px;

@mixin small-mobile{
  @media screen and (max-width:$xtra-small-width){
    @content
  }
}

@mixin mobile{
  @media screen and (max-width: $small-width){
    @content
  }
}
@mixin not-mobile{
  @media screen and (min-width: $small-width){
    @content
  }
}

@mixin tablet{
  @media screen and (min-width: $small-width) and (max-width: $medium-width){
    @content
  }
}

@mixin desktop{
  @media screen and (min-width: $large-width){
    @content
  }
}

@mixin below-portable-devices{
  @media screen and (max-width: $medium-width){
    @content
  }
}
@mixin above-portable-devices{
  @media screen and (min-width: $medium-width){
    @content
  }
}

@mixin below-desktop{
  @media screen and (max-width: $large-width){
    @content
  }
}

@mixin flexbox{
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin flex-flow($values:(row nowrap)){
  -webkit-flex-flow: $values;
  -moz-flex-flow:$values;
  -ms-flex-flox:$values;
  flex-flow:$values;
}

@mixin flex-order($int:0){
  -moz-box-ordinal-group: $int;
  -ms-box-ordinal-group: $int;
  -webkit-box-ordinal-group: $int;
  order:$int;
}

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {

  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so let's grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -moz-box-flex: $fg-boxflex;
  -moz-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

@mixin flex-shrink($int: 1) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex-negative: $int;
  flex-shrink: $int;
}

@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}
@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}
